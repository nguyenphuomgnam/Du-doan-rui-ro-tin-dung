import streamlit as st
import pandas as pd
import joblib
import numpy as np
import plotly.graph_objects as go
import matplotlib.pyplot as plt

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng", page_icon="üí∞", layout="centered")

# Load m√¥ h√¨nh v√† b·ªô x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_resource
def load_model():
    return joblib.load("credit_risk_model.pkl")

@st.cache_resource
def load_preprocessor():
    return joblib.load("preprocessor.pkl")

mo_hinh = load_model()
preprocessor = load_preprocessor()

# Giao di·ªán ti√™u ƒë·ªÅ
st.subheader("NCKH: P.Nam, H.Nam, P.Huy, T.Ti·∫øn, V.Vinh")
st.title("üîç ·ª®ng d·ª•ng D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng")
st.markdown("### **Nh·∫≠p th√¥ng tin kh√°ch h√†ng ƒë·ªÉ ki·ªÉm tra r·ªßi ro t√≠n d·ª•ng** üí≥")

# Nh·∫≠p d·ªØ li·ªáu kh√°ch h√†ng
st.subheader("üìã Nh·∫≠p th√¥ng tin kh√°ch h√†ng:")
age = st.slider("üìÜ Tu·ªïi", 18, 100, 30)
job = st.selectbox("üëî Lo·∫°i c√¥ng vi·ªác", ["Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫", "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫", "C√≥ k·ªπ nƒÉng", "R·∫•t c√≥ k·ªπ nƒÉng"])
job_mapping = {"Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫": 0, "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫": 1, "C√≥ k·ªπ nƒÉng": 2, "R·∫•t c√≥ k·ªπ nƒÉng": 3}
job = job_mapping[job]

credit_amount = st.number_input("üíµ Kho·∫£n vay (DM)", min_value=500, max_value=50000, value=10000, step=100)

duration = st.slider("üïí Th·ªùi h·∫°n vay (th√°ng)", 6, 72, 24)

sex = st.radio("üöª Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], horizontal=True)
sex = 0 if sex == "Nam" else 1

housing = st.selectbox("üè† H√¨nh th·ª©c nh√† ·ªü", ["S·ªü h·ªØu", "Thu√™", "Mi·ªÖn ph√≠"])
housing_mapping = {"S·ªü h·ªØu": 0, "Thu√™": 1, "Mi·ªÖn ph√≠": 2}
housing = housing_mapping[housing]

saving_accounts = st.selectbox("üí∞ T√†i kho·∫£n ti·∫øt ki·ªám", ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Kh√° nhi·ªÅu", "Nhi·ªÅu"])
saving_mapping = {"Kh√¥ng c√≥": -1, "√çt": 0, "Trung b√¨nh": 1, "Kh√° nhi·ªÅu": 2, "Nhi·ªÅu": 3}
saving_accounts = saving_mapping[saving_accounts]

checking_account = st.number_input("üè¶ S·ªë d∆∞ t√†i kho·∫£n v√£ng lai (DM)", min_value=-1.0, max_value=10000.0, value=0.0, step=100.0)

purpose = st.selectbox("üéØ M·ª•c ƒë√≠ch vay", ["Mua √¥ t√¥", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã", "Mua radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng", "S·ª≠a ch·ªØa", "Gi√°o d·ª•c", "Kinh doanh", "Du l·ªãch/Kh√°c"])
purpose_mapping = {"Mua √¥ t√¥": 0, "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã": 1, "Mua radio/TV": 2, "Mua thi·∫øt b·ªã gia d·ª•ng": 3,
                   "S·ª≠a ch·ªØa": 4, "Gi√°o d·ª•c": 5, "Kinh doanh": 6, "Du l·ªãch/Kh√°c": 7}
purpose = purpose_mapping[purpose]

# Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·∫ßu v√†o th√†nh DataFrame
input_data = pd.DataFrame([{
    "Age": age,
    "Job": job,
    "Credit amount": credit_amount,
    "Duration": duration,
    "Sex": sex,
    "Housing": housing,
    "Saving accounts": saving_accounts,
    "Checking account": checking_account,
    "Purpose": purpose
}])

# D·ª± ƒëo√°n k·∫øt qu·∫£
if st.button("üìå D·ª± ƒëo√°n ngay"):
    with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
        # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_transformed = preprocessor.transform(input_data)
        prediction = mo_hinh.predict_proba(input_transformed)[:, 1]  # L·∫•y x√°c su·∫•t m·∫Øc n·ª£ x·∫•u
        risk_score = prediction[0]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.markdown("---")
    st.subheader("üîπ K·∫øt qu·∫£ D·ª± ƒêo√°n")
    if risk_score > 0.5:
        st.error(f"‚ö†Ô∏è **Nguy c∆° t√≠n d·ª•ng x·∫•u: {risk_score:.2%}**")
    else:
        st.success(f"‚úÖ **Kh·∫£ nƒÉng ho√†n tr·∫£ t·ªët: {risk_score:.2%}**")

    # Bi·ªÉu ƒë·ªì tr·ª±c quan
    st.markdown("#### üìä Ph√¢n t√≠ch r·ªßi ro")

    # Bi·ªÉu ƒë·ªì gauge
    fig1 = go.Figure(go.Indicator(
        mode="gauge+number",
        value=risk_score * 100,
        title={"text": "Nguy c∆° t√≠n d·ª•ng x·∫•u (%)"},
        gauge={"axis": {"range": [0, 100]},
               "bar": {"color": "red"},
               "steps": [{"range": [0, 50], "color": "grey"},
                         {"range": [50, 100], "color": "grey"}]}
    ))
    st.plotly_chart(fig1, use_container_width=True)

    # Bi·ªÉu ƒë·ªì c·ªôt
    fig2, ax = plt.subplots()
    ax.bar(["T·ªët", "R·ªßi ro"], [1 - risk_score, risk_score], color=["green", "red"])
    ax.set_ylabel("X√°c su·∫•t")
    ax.set_title("So s√°nh m·ª©c ƒë·ªô r·ªßi ro t√≠n d·ª•ng")
    st.pyplot(fig2)

    # Bi·ªÉu ƒë·ªì tr√≤n
    labels = ["Ho√†n tr·∫£ t·ªët", "N·ª£ x·∫•u"]
    values = [1 - risk_score, risk_score]
    fig3 = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.4)])
    fig3.update_traces(marker=dict(colors=["green", "red"]))
    st.plotly_chart(fig3, use_container_width=True)
